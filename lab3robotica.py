# -*- coding: utf-8 -*-
"""lab3Robotica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ymm5ubu3VGj_9n2Gjogmwxsuz35MeG5n

Control de la tortuga con teclado
"""

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.srv import TeleportAbsolute, TeleportRelative
import sys
import termios
import tty

class TurtleTeleop(Node):
    def __init__(self):
        super().__init__('turtle_teleop')
        self.publisher_ = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)
        self.teleport_abs_client = self.create_client(TeleportAbsolute, '/turtle1/teleport_absolute')
        self.teleport_rel_client = self.create_client(TeleportRelative, '/turtle1/teleport_relative')

        self.get_logger().info("Control de la tortuga con W, A, S, D, R, ESPACIO")

    def get_key(self):
        """ Captura una tecla sin necesidad de presionar ENTER. """
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(fd)
            return sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

    def run(self):
        """ Controla la tortuga según la tecla presionada. """
        twist = Twist()
        while rclpy.ok():
            key = self.get_key()

            if key == 'w':  # Adelante
                twist.linear.x = 1.0
                twist.angular.z = 0.0
            elif key == 's':  # Atrás
                twist.linear.x = -1.0
                twist.angular.z = 0.0
            elif key == 'a':  # Giro a la izquierda
                twist.linear.x = 0.0
                twist.angular.z = 1.0
            elif key == 'd':  # Giro a la derecha
                twist.linear.x = 0.0
                twist.angular.z = -1.0
            elif key == 'r':  # Regresar al centro
                req = TeleportAbsolute.Request()
                req.x = 5.544445
                req.y = 5.544445
                req.theta = 0.0
                self.teleport_abs_client.call_async(req)
            elif key == ' ':  # Giro de 180°
                req = TeleportRelative.Request()
                req.angular = 3.1416  # 180°
                self.teleport_rel_client.call_async(req)
            elif key == '\x03':  # Ctrl+C para salir
                break
            else:
                twist.linear.x = 0.0
                twist.angular.z = 0.0

            self.publisher_.publish(twist)

def main(args=None):
    rclpy.init(args=args)
    node = TurtleTeleop()
    node.run()
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()